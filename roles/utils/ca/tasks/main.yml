- name: "Create tools directory"
  ansible.builtin.file:
    path: "{{ workdir }}/tools"
    state: directory
  run_once: true
  delegate_to: localhost

- name: "Update facts on localhost"
  ansible.builtin.setup:
  run_once: true
  delegate_to: localhost
  delegate_facts: true

- name: "Download binaries"
  ansible.builtin.get_url:
    url: "{{ cfssl_base_url }}/{{ item }}"
    dest: "{{ workdir }}/tools/{{ item }}"
    mode: 0755
  loop:
    - cfssl
    - cfssljson
  run_once: true
  delegate_to: localhost

# Check and generate CA certificate ca.pem and ca-key.pem files
- name: "Check CA key and certificate"
  ansible.builtin.stat:
    path: "{{ workdir }}/{{ item }}"
  loop:
    - ca.pem
    - ca-key.pem
  delegate_to: localhost
  run_once: true
  register: ca_check

- name: "Create configuration for signing"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ workdir }}/{{ item }}"
  loop:
    - ca-config.json
    - ca-csr.json
  delegate_to: localhost
  run_once: true

- name: "Create CA key and certificate"
  ansible.builtin.shell: >
    tools/cfssl gencert -initca ca-csr.json | tools/cfssljson -bare ca
  args:
    chdir: "{{ workdir }}"
  delegate_to: localhost
  run_once: true
  when: false in (ca_check.results | map(attribute='stat.exists'))

# Check and generate additional certificates
- name: "Check client keys"
  ansible.builtin.stat:
    path: "{{ workdir }}/{{ item.name }}-key.pem"
  loop: "{{ ca_certs }}"
  loop_control:
    label: "{{ item.name }}-key.pem"
  delegate_to: localhost
  run_once: true
  register: ca_client_key_check

- name: "Check client certificates"
  ansible.builtin.stat:
    path: "{{ workdir }}/{{ item.name }}.pem"
  loop: "{{ ca_certs }}"
  loop_control:
    label: "{{ item.name }}.pem"
  delegate_to: localhost
  run_once: true
  register: ca_client_cert_check

- name: "Generate configuration for client keys and certificates"
  ansible.builtin.template:
    src: "client-csr.json.j2"
    dest: "{{ workdir }}/{{ item.item.name }}-csr.json"
  loop: "{{ ca_client_cert_check.results }}"
  loop_control:
    index_var: idx
    label: "{{ item.item.name }}-csr.json"
  delegate_to: localhost
  run_once: true
  when:
    - not item.stat.exists
    - not ca_client_key_check.results[idx].stat.exists

- name: "Generate client keys and certificates"
  ansible.builtin.shell: |
    tools/cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=ca-config.json \
      {% if item.item.san is defined %}
      -hostname={{ item.item.san }} \
      {% endif %}
      -profile=kubernetes \
      {{ item.item.name }}-csr.json | tools/cfssljson -bare {{ item.item.name }}
  args:
    chdir: "{{ workdir }}"
  loop: "{{ ca_client_cert_check.results }}"
  loop_control:
    index_var: idx
    label: "{{ item.item.name }}.pem"
  delegate_to: localhost
  run_once: true
  when:
    - not item.stat.exists
    - not ca_client_key_check.results[idx].stat.exists
