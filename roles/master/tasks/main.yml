- name: "Download previously generated files"
  fetch:
    src: "/var/lib/kubernetes/{{ item }}"
    dest: "{{ workdir }}/{{ item }}"
    fail_on_missing: false
    flat: true
  loop: "{{ master_files }}"
  delegate_to: "{{ groups['master'] | first }}"
  run_once: true
  become: true

- name: "Generate master certificates"
  import_role:
    name: utils/ca
  vars:
    ca_certs:
      - {name: "admin", cn: "admin", o: "system:masters"}
      - {name: "kubernetes", cn: "system:kubernetes", san: "127.0.0.1,10.32.0.1,kubernetes.default,{{ groups['master'] | map('extract', hostvars, 'external_ip') | join(',') }}"}
      - {name: "kube-controller-manager", cn: "system:kube-controller-manager", o: "system:kube-controller-manager"}
      - {name: "kube-scheduler", cn: "system:kube-scheduler", o: "system:kube-scheduler"}
      - {name: "service-account", cn: "service-accounts"}

- name: "Check encryption config"
  stat:
    path: "{{ workdir }}/encryption-config.yaml"
  delegate_to: localhost
  run_once: true
  register: master_encryption_check

- name: "Generate encryption config"
  block:
    - command: >
        head -c 32 /dev/urandom
      register: master_encryption_key

    - copy:
        dest: "{{ workdir }}/encryption-config.yaml"
        content: |
          kind: EncryptionConfig
          apiVersion: v1
          resources:
            - resources:
                - secrets
          providers:
            - aescbc:
                keys:
                  - name: key1
                    secret: {{ master_encryption_key.stdout | b64encode }}
            - identity: {}
  delegate_to: localhost
  run_once: true
  when: not master_encryption_check.stat.exists

- name: "Copy keys and certificates"
  copy:
    dest: "/var/lib/kubernetes/{{ item }}"
    src: "{{ workdir }}/{{ item }}"
    owner: root
    group: root
    mode: 0600
  loop: "{{ master_files }}"
  become: true

- name: "Generate kubeconfigs"
  include_role:
    name: utils/kubeconfig
  vars:
    kubeconfig_path: "/var/lib/kubernetes/{{ item.name }}.kubeconfig"
    kubeconfig_server: "https://127.0.0.1:6443"
    kubeconfig_user: "{{ item.user }}"
    kubeconfig_user_cert: "{{ lookup('file', workdir + '/{{ item.name }}.pem') }}"
    kubeconfig_user_key: "{{ lookup('file', workdir + '/{{ item.name }}-key.pem') }}"
  loop:
    - {name: admin, user: admin}
    - {name: kube-controller-manager, user: "system:kube-controller-manager"}
    - {name: kube-scheduler, user: "system:kube-scheduler"}

- name: "Copy kube-scheduler.yaml"
  copy:
    src: kube-scheduler.yaml
    dest: /etc/kubernetes/config/kube-scheduler.yaml
    owner: root
    group: root
    mode: 0644
  become: true

- name: "Download binaries"
  get_url:
    url: "{{ master_base_url }}/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    owner: root
    group: root
    mode: 0755
  loop:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubectl
  become: true

- name: "Create master services"
  template:
    src: "{{ item }}.service.j2"
    dest: "/etc/systemd/system/{{ item }}.service"
    owner: root
    group: root
    mode: 0644
  loop: "{{ master_services }}"
  become: true
  notify:
    - Reload systemd

- name: "Enable master services"
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop: "{{ master_services }}"
  become: true